name: ECS DEPLOY
on:
  push:
    branches:
      - production
      - development
     
jobs:
  set_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine environment based on branch
        id: set_env
        run: |
          if [ "$GITHUB_REF" == "refs/heads/production" ]; then
            echo "environment=prod" >> "$GITHUB_ENV"
          elif [ "$GITHUB_REF" == "refs/heads/development" ]; then
            echo "environment=dev" >> "$GITHUB_ENV"
          fi

    outputs:
      environment: ${{ env.environment }}

  Ecs_Deploy:
    runs-on: ubuntu-latest
    needs: set_environment
    environment: ${{ needs.set_environment.outputs.environment }}
    env:
      workspace: ${{ github.workspace }}
      ARTIFACTS: ${{ secrets.BUCKET_ARTIFACTS }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials 1
        id: creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          output-credentials: true
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: us-east-2

      - name: Create ZIP file
        run: |
          zip -r $workspace/CirclAPI.zip . -x ./README.md .git\*

      - name: Copy artifacts to S3
        run: |
          aws s3 cp $workspace/CirclAPI.zip s3://$ARTIFACTS/${{ needs.set_environment.outputs.environment }}/${{ github.repository }}/CirclAPI.zip
          rm $workspace/CirclAPI.zip

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and Push Docker image
        id: build-image
        run: |
          docker build --build-arg environment=${{ needs.set_environment.outputs.environment }} -t ${{ secrets.REPO_NAME }}:${{ github.run_id }}  .
          docker tag ${{ secrets.REPO_NAME }}:${{ github.run_id }} ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.run_id }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.run_id }}
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.run_id }}" >> $GITHUB_OUTPUT
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEF }} --query taskDefinition > ./task-definition.json

      - name: Render new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: AWS Publish build notifications
        if : always ()
        env:
          TOPIC_ARN: arn:aws:sns:us-east-2:133769080115:code-deployment-status
        run : |
          cat << EOF > file.txt
          Build Status:  ${{ job.status }}
          Deploy target: ${{ github.ref}}
          Job: ${{ github.run_id }}
          Triggered By: ${{ github.actor }}
          Event Type: ${{ github.event_name }}
          Commit id: ${{ github.sha }}
          Commit Message: ${{ github.event.head_commit.message }}
          Build Number: ${{ github.run_number }}
          Repository: ${{ github.repository }}
          Workflow: ${{ github.workflow }}
          More info at: https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks
          EOF
          aws sns publish --topic-arn $TOPIC_ARN --subject "GitHub Actions Build: ${{ github.repository }} ${{ github.job }} is ${{ job.status }}" --message file://file.txt